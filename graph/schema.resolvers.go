package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"graphql_project/graph/model"
)

func (r *commentResolver) Comments(ctx context.Context, obj *model.Comment, offset *int, limit *int) ([]*model.Comment, error) {
	if len(obj.Comments) == 0 {
		return obj.Comments, nil
	}
	off := 0
	if offset != nil && int(*offset) < len(obj.Comments) {
		off = int(*offset)
	}
	lim := len(obj.Comments)
	if limit != nil && int(*limit) <= len(obj.Comments) {
		lim = int(*limit)
	}
	return obj.Comments[off:lim], nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	return r.Service.CreatePost(ctx, input)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	comment, err := r.Service.CreateComment(ctx, input)
	if err != nil {
		return nil, err
	}

	for _, observer := range r.observers {
		if comment.PostID.String() == observer.postID {
			observer.ch <- comment
		}
	}

	return comment, nil
}

func (r *postResolver) Comments(ctx context.Context, obj *model.Post, offset *int, limit *int) ([]*model.Comment, error) {
	if len(obj.Comments) == 0 {
		return obj.Comments, nil
	}
	off := 0
	if offset != nil && int(*offset) < len(obj.Comments) {
		off = int(*offset)
	}
	lim := len(obj.Comments)
	if limit != nil && int(*limit) <= len(obj.Comments) {
		lim = int(*limit)
	}
	return obj.Comments[off:lim], nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, offset *int, limit *int) ([]*model.Post, error) {
	var offsetInt *int
	if offset != nil {
		tmp := int(*offset)
		offsetInt = &tmp
	}

	var limitInt *int
	if limit != nil {
		tmp := int(*limit)
		limitInt = &tmp
	}

	return r.Service.GetAllPosts(ctx, offsetInt, limitInt)
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	return r.Service.GetPost(ctx, id)
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) (<-chan *model.Comment, error) {
	newObserver := observer{
		ch:     make(chan *model.Comment),
		postID: postID,
	}

	r.mu.Lock()
	r.observers = append(r.observers, newObserver)
	r.mu.Unlock()

	id := len(r.observers) - 1
	go func() {
		<-ctx.Done()
		r.mu.Lock()
		defer r.mu.Unlock()
		r.observers = append(r.observers[:id], r.observers[:id+1]...)
	}()

	return r.observers[id].ch, nil
}

func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type commentResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
