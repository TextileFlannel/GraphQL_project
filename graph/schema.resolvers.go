package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"fmt"
	"graphql_project/graph/model"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, author string) (*model.Post, error) {
	newPost := &model.Post{
		Title:   title,
		Content: content,
		Author:  author,
	}
	return r.Storage.CreatePost(ctx, newPost)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, postID string, content string, author string, parentID *string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CreateComment - createComment"))
}

// ToggleComments is the resolver for the toggleComments field.
func (r *mutationResolver) ToggleComments(ctx context.Context, postID string, author string, enabled bool) (*model.Post, error) {
	post, err := r.Storage.GetPostByID(ctx, postID)
    if err != nil {
        return nil, fmt.Errorf("post not found")
    }

    if post.Author != author {
        return nil, fmt.Errorf("only post author can modify comments settings")
    }

    err = r.Storage.ToggleComments(ctx, postID, enabled)
    if err != nil {
        return nil, fmt.Errorf("internal server error")
    }

    return r.Storage.GetPostByID(ctx, postID)
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, first int32, after *string) (*model.PostsConnection, error) {
	posts, hasNext, err := r.Storage.GetAllPosts(ctx, first, after)
	if err != nil {
		return nil, err
	}

	edges := make([]*model.PostEdge, len(posts))
	for i, post := range posts {
		edges[i] = &model.PostEdge{
			Node:   post,
			Cursor: post.ID,
		}
	}

	var endCursor *string
	if len(posts) > 0 {
		endCursor = &posts[len(posts)-1].ID
	}

	return &model.PostsConnection{
		Edges: edges,
		PageInfo: &model.PageInfo{
			HasNextPage: hasNext,
			EndCursor:   endCursor,
		},
	}, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	post, err := r.Storage.GetPostByID(ctx, id)
    if err != nil {
        return nil, fmt.Errorf("post not found")
    }
	
    return post, nil
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) (<-chan *model.Comment, error) {
	panic(fmt.Errorf("not implemented: CommentAdded - commentAdded"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
